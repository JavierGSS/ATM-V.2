{"ast":null,"code":"var _jsxFileName = \"/Users/babalu/Desktop/Desktop - Perikles/MIT/Week 15/ATM_Exercise/atm-refactored/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ATMDeposit = ({\n  onChange,\n  isDeposit\n}) => {\n  // we add an array 'choice' to specify whether we deal with a deposit or not:\n  const choice = [\"Deposit\", \"Cash Back\"];\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    className: \"label-huge\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: choice[Number(!isDeposit)]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      id: \"input\",\n      onChange: onChange,\n      placeholder: \"Enter amount...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 7\n  }, this);\n};\n_c = ATMDeposit;\nconst App = () => {\n  _s();\n  let deposit = 0; //state of this transaction\n  const [totalState, setTotalState] = React.useState(0);\n\n  // we create a new state variable to handle deposits; we initialize it with true:\n  const [isDeposit, setIsDeposit] = React.useState(true);\n  let status = `Account balance: $${totalState}`;\n  console.log('Account rendered');\n  const handleChange = event => {\n    console.log(`handle change: ${event.target.value}.`);\n    deposit = Number(event.target.value);\n  };\n  const handleSubmit = event => {\n    // we create a new variable newTotal whose value depends on whether \n    // isDeposit is true or false:\n    let newTotal = totalState;\n\n    // this series of if-statements determine the newTotal variable and restricts withdraws:\n    if (isDeposit == true) {\n      newTotal = totalState + deposit;\n    } else {\n      if (totalState - deposit >= 0) {\n        newTotal = totalState - deposit;\n      } else {\n        if (totalState > 0) {\n          alert(`Insufficient funds. Please enter an amount less than or equal to $${totalState}.`);\n          newTotal = totalState;\n        }\n        if (totalState == 0) {\n          alert(`Your accout balance is $${totalState}. You are not authorized to withdraw any money.`);\n          newTotal = totalState;\n        }\n      }\n    }\n    setTotalState(newTotal);\n\n    // event.target.reset() clears the input field upon submission:\n    event.target.reset();\n    event.preventDefault();\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Cool Bank\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"total\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button1\",\n        onClick: () => setIsDeposit(true),\n        children: \"Deposit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button2\",\n        onClick: () => setIsDeposit(false),\n        children: \"Cash Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ATMDeposit, {\n      className: \"input\",\n      onChange: handleChange,\n      isDeposit: isDeposit,\n      children: \"Deposit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 7\n  }, this);\n};\n_s(App, \"umufbpVmXePZAxfb4aN4Zu/zuzo=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"ATMDeposit\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ATMDeposit","onChange","isDeposit","choice","className","children","Number","fileName","_jsxFileName","lineNumber","columnNumber","type","id","placeholder","value","_c","App","_s","deposit","totalState","setTotalState","useState","setIsDeposit","status","console","log","handleChange","event","target","handleSubmit","newTotal","alert","reset","preventDefault","onSubmit","onClick","_c2","$RefreshReg$"],"sources":["/Users/babalu/Desktop/Desktop - Perikles/MIT/Week 15/ATM_Exercise/atm-refactored/src/App.jsx"],"sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst ATMDeposit = ({onChange, isDeposit}) => {\n\n  // we add an array 'choice' to specify whether we deal with a deposit or not:\n  const choice = [\"Deposit\", \"Cash Back\"];\n  return (\n      <label className=\"label-huge\">\n\n          {/*we include an h3 tag that will print 'Deposit' or 'Cash Back' depending on \n          whether we deal with a deposit or not. Notice that Number will translate a \n          Boolean into a 0 (when F) or 1 (when T), so that we pick the correct element\n          in the choice array. The default number is 0, so the default text is 'Deposit': */}\n          <h3>{choice[Number(!isDeposit)]}</h3> \n          <input type=\"number\" id=\"input\" onChange={onChange} placeholder=\"Enter amount...\"></input>\n          <input type=\"submit\" value=\"Submit\"></input>\n      </label>\n      \n  );\n};\n\nconst App = () => {\n  let deposit = 0; //state of this transaction\n  const [totalState, setTotalState] = React.useState(0);\n\n  // we create a new state variable to handle deposits; we initialize it with true:\n  const [isDeposit, setIsDeposit] = React.useState(true);\n  let status = `Account balance: $${totalState}`;\n  console.log('Account rendered');\n\n  const handleChange = event => {\n      console.log(`handle change: ${event.target.value}.`);\n      deposit = Number(event.target.value);\n  };\n\n  const handleSubmit = event => {\n\n      // we create a new variable newTotal whose value depends on whether \n      // isDeposit is true or false:\n      let newTotal = totalState;\n\n      // this series of if-statements determine the newTotal variable and restricts withdraws:\n      if (isDeposit == true) {\n          newTotal = totalState + deposit;\n       } else {\n          if (totalState - deposit >= 0) {\n              newTotal = totalState - deposit;\n          } else {\n              if (totalState > 0) {\n                  alert(`Insufficient funds. Please enter an amount less than or equal to $${totalState}.`);\n                  newTotal = totalState;\n              }\n              if (totalState == 0) {\n                  alert(`Your accout balance is $${totalState}. You are not authorized to withdraw any money.`);\n                  newTotal = totalState;\n              }\n          }\n      }\n      \n      setTotalState(newTotal);\n\n      // event.target.reset() clears the input field upon submission:\n      event.target.reset();\n      event.preventDefault();\n  }\n\n  return (\n \n      <form onSubmit={handleSubmit}>\n        <h1>Cool Bank</h1>\n        <h2 id=\"total\">{status}</h2>\n\n        {/* we add two buttons to handle deposits and cash backs, which fire a state update */}\n        <div className=\"container\">\n          <button className=\"button1\" onClick={() => setIsDeposit(true)}>Deposit</button>\n          <button className=\"button2\" onClick={() => setIsDeposit(false)}>Cash Back</button>\n        </div>\n          <ATMDeposit className=\"input\" onChange={handleChange} isDeposit={isDeposit}>Deposit</ATMDeposit>\n\n      </form>\n\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}